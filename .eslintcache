[{"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/index.js":"1","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/App.js":"2","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/reportWebVitals.js":"3","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/store/index.js":"4","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/constants/apikey.js":"5","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/main/main.js":"6","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/answers/answer.js":"7","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/reducers/index.js":"8","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/constants/dummyData.js":"9","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/reducers/userReducer.js":"10","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/fetch/index.js":"11","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/actions/userActions.js":"12","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/countdownwrapper/index.js":"13","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/register/register.js":"14","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/input/input.js":"15","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/constants/action-types.js":"16","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/loading/index.js":"17","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/result/index.js":"18","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/custombutton/index.js":"19"},{"size":620,"mtime":1611159305589,"results":"20","hashOfConfig":"21"},{"size":904,"mtime":1611352856996,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1610731866693,"results":"23","hashOfConfig":"21"},{"size":332,"mtime":1611159305592,"results":"24","hashOfConfig":"21"},{"size":482,"mtime":1610803753123,"results":"25","hashOfConfig":"21"},{"size":859,"mtime":1611341357241,"results":"26","hashOfConfig":"21"},{"size":5785,"mtime":1611400496329,"results":"27","hashOfConfig":"21"},{"size":181,"mtime":1611159305590,"results":"28","hashOfConfig":"21"},{"size":2979,"mtime":1611341357246,"results":"29","hashOfConfig":"21"},{"size":931,"mtime":1611341357246,"results":"30","hashOfConfig":"21"},{"size":1549,"mtime":1610805740471,"results":"31","hashOfConfig":"21"},{"size":3464,"mtime":1611341357237,"results":"32","hashOfConfig":"21"},{"size":540,"mtime":1611342185514,"results":"33","hashOfConfig":"21"},{"size":3181,"mtime":1611341357243,"results":"34","hashOfConfig":"21"},{"size":3279,"mtime":1611341357239,"results":"35","hashOfConfig":"21"},{"size":306,"mtime":1611341357245,"results":"36","hashOfConfig":"21"},{"size":1511,"mtime":1611341357240,"results":"37","hashOfConfig":"21"},{"size":1757,"mtime":1611341357244,"results":"38","hashOfConfig":"21"},{"size":930,"mtime":1611155017682,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"hf6i4y",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/index.js",[],["85","86"],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/App.js",["87"],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/reportWebVitals.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/store/index.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/constants/apikey.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/main/main.js",["88"],"import React from \"react\";\nimport \"./main.css\";\nimport Answers from \"../answers/answer\";\nimport CustomizedInputs from \"../input/input\";\nimport Register from \"../register/register\";\nimport Result from \"../result/index\";\n\nconst Main = ({ isLoggedIn, user, appState, error }) => {\n  return (\n    <div>\n      {!isLoggedIn ? (\n        <CustomizedInputs />\n      ) : (\n        <div className=\"quiz_component\">\n          <div className=\"answers\">\n            <Answers\n              appState={appState}\n              isAdmin={user.role === \"admin\" ? true : false}\n              user={user}\n            />\n          </div>\n          <div className=\"result\">\n            <Result />\n          </div>\n        </div>\n      )}\n    </div>\n    /*     <div>\n    <Register />\n    </div> */\n  );\n};\n\nexport default Main;\n","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/answers/answer.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/reducers/index.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/constants/dummyData.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/reducers/userReducer.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/fetch/index.js",["89"],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/actions/userActions.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/countdownwrapper/index.js",["90","91"],"import React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nconst CountDownWrapper = props => {\n  let seconds = 20;\n  let counter = 100;\n\n  console.log(\"hamza: timer -> \" + props.timer);\n  return (\n    <div>\n      <CountdownCircleTimer\n        onComplete={props.onComplete}\n        children={props.children}\n        key={props.timer}\n        isPlaying\n        duration={19}\n        size={100}\n        strokeWidth={4}\n        colors=\"#3b5998\"\n      />\n    </div>\n  );\n};\nexport default CountDownWrapper;\n","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/register/register.js",["92","93"],"import React, { useState, useEffect } from \"react\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./register.css\";\nimport firebase from \"firebase\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nconst useStylesReddit = makeStyles(theme => ({\n  root: {\n    border: \"1px solid #e2e2e1\",\n    overflow: \"hidden\",\n    borderRadius: 4,\n    backgroundColor: \"#fcfcfb\",\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n    \"&:hover\": {\n      backgroundColor: \"#fff\"\n    },\n    \"&$focused\": {\n      backgroundColor: \"#fff\",\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n      borderColor: theme.palette.primary.main\n    }\n  },\n  focused: {}\n}));\n\nfunction RedditTextField(props) {\n  const classes = useStylesReddit();\n\n  return (\n    <TextField InputProps={{ classes, disableUnderline: true }} {...props} />\n  );\n}\n\nconst Register = ({ isLoggedIn }) => {\n  const [user, setUser] = useState({\n    name : '',\n    familyName: '',\n    id: '',\n    role: 'user'\n  }\n  );\n  const handleSubmit = () => {\n    console.log(user,\"userss\")\n    let carListRef = firebase.database().ref(\"users\");\n    let newCarRef = carListRef.push();\n    newCarRef\n      .set(user)\n      .then(resp => {\n        console.log(resp);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const handleChange  = (val,field) => {\n    setUser({\n      ...user,\n      [field]: val,\n    });\n  };\n\n  return (\n    <div className=\"input_container\" align=\"center\">\n      <RedditTextField\n        label=\"Name\"\n        defaultValue={user.name}\n        onChange={e => handleChange(e.target.value,'name')}\n        variant=\"filled\"\n        id=\"reddit-input\"\n      />\n      <RedditTextField\n        label=\"Family Name\"\n        defaultValue={user.familyName}\n        onChange={e => handleChange(e.target.value,'familyName')}\n        variant=\"filled\"\n        id=\"reddit-input\"\n      />\n      \n      <RedditTextField\n        label=\"ID\"\n        defaultValue={user.id}\n        onChange={e => handleChange(e.target.value,'id')}\n        variant=\"filled\"\n        id=\"reddit-input\"\n      />\n      \n      <Button\n        onClick={handleSubmit}\n        variant=\"contained\"\n        className=\"submitButton\"\n        disabled={!user.name || !user.id || !user.familyName}\n      >\n        submit\n      </Button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (props) => ({\n\tisLoggedIn: props.userReducer.isLoggedIn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\t//actions: bindActionCreators(Actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/input/input.js",["94","95","96"],"import React, { useState, useEffect } from \"react\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./input.css\";\nimport firebase from \"firebase\";\nimport * as Actions from \"../../actions/userActions\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nconst useStylesReddit = makeStyles(theme => ({\n  root: {\n    border: \"1px solid #e2e2e1\",\n    overflow: \"hidden\",\n    borderRadius: 4,\n    backgroundColor: \"#fcfcfb\",\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n    \"&:hover\": {\n      backgroundColor: \"#fff\"\n    },\n    \"&$focused\": {\n      backgroundColor: \"#fff\",\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n      borderColor: theme.palette.primary.main\n    }\n  },\n  focused: {}\n}));\n\nfunction RedditTextField(props) {\n  const classes = useStylesReddit();\n\n  return (\n    <TextField InputProps={{ classes, disableUnderline: true }} {...props} />\n  );\n}\n\nconst CustomizedInputs = ({\n  actions,\n  error,\n  loginSuccess,\n  user,\n  isLoggedIn\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [errorValue, setErrorValue] = useState(\"Please Enter Value\");\n  const [errors, isError] = useState(false);\n\n  useEffect(() => {\n    if(loginSuccess){\n      actions.getLoginState();\n    }\n  }, [user]);\n  useEffect(() => {\n    isError(error);\n  }, [error]);\n  const handleSubmit = () => {\n    actions.getUserData(value);\n    console.log(\"Error: \" + error);\n    if (error) {\n      setErrorValue(\"Please Enter Value\");\n      isError(error);\n    }\n  };\n\n  const handleChange = e => {\n    isError(false);\n    setValue(e.target.value);\n  };\n\n  const startQuiz = () => {\n    actions.startQuiz();\n  };\n  return (\n    <div className=\"input_container\" align=\"center\">\n      {!loginSuccess && !isLoggedIn && (\n        <>\n          <RedditTextField\n            label=\"Enter your key\"\n            defaultValue={value}\n            onChange={e => handleChange(e)}\n            variant=\"filled\"\n            id=\"reddit-input\"\n          />\n          <Button\n            onClick={handleSubmit}\n            variant=\"contained\"\n            className=\"submitButton\"\n            disabled={!value}\n          >\n            submit\n          </Button>\n        </>\n      )}\n      {loginSuccess && !isLoggedIn && user.role === \"user\" && (\n        <>\n          <p>Quiz will start soon</p>\n        </>\n      )}\n      {loginSuccess && !isLoggedIn && user.role === \"admin\" && (\n        <>\n          <Button\n            onClick={startQuiz}\n            variant=\"contained\"\n            className=\"submitButton\"\n          >\n            Start Quiz\n          </Button>\n        </>\n      )}\n\n      {errors && <p style={{ color: \"red\" }}>Invalid User key</p>}\n    </div>\n  );\n};\n\nconst mapStateToProps = props => ({\n  loginSuccess: props.userReducer.loginSuccess,\n  isLoggedIn: props.userReducer.isLoggedIn,\n  user: props.userReducer.user,\n  error: props.userReducer.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(Actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomizedInputs);\n","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/constants/action-types.js",[],"/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/loading/index.js",["97"],"import React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Main from \"../main/main\";\nimport * as Actions from \"../../actions/userActions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst Loading = ({ isLoggedIn, actions, user, appState }) => {\n  const [Loadingg, isLoadingg] = useState(false);\n\n  useEffect(() => {\n    actions.getAppState();\n    if (localStorage.getItem(\"id\")) {\n      actions.getLoginState();\n      actions.getUserData(localStorage.getItem(\"id\"));\n    }\n    setTimeout(function() {\n      isLoadingg(true);\n    }, 1000);\n  }, []);\n  return (\n    <div>\n      {!Loadingg ? (\n        <div className=\"progress_bar\" align=\"center\">\n          <CircularProgress className=\"progress_barColor\" color=\"primary\" />\n        </div>\n      ) : (\n        <div className=\"progress_bar\" align=\"center\">\n          <Main appState={appState} user={user} isLoggedIn={isLoggedIn} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = props => ({\n  isLoggedIn: props.userReducer.isLoggedIn,\n  user: props.userReducer.user,\n  appState: props.userReducer.appState\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(Actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);\n","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/result/index.js",["98","99"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport \"./index.css\";\n\nconst useStyles = makeStyles({});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData(\"Hamza\", 27),\n  createData(\"Umer\", 22),\n  createData(\"Fayez\", 17),\n  createData(\"People\", 12),\n  createData(\"Poepl1\", 11)\n];\n\nconst Result = () => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <h2>Results</h2>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <b className=\"color\">Name</b>\n              </TableCell>\n              <TableCell align=\"right\">\n                <b className=\"color\">Result</b>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <TableRow key={row.name}>\n                <TableCell className=\"color\" component=\"th\" scope=\"row\">\n                  <p className=\"color\">{row.name}</p>\n                </TableCell>\n                <TableCell className=\"color\" align=\"right\">\n                  <p className=\"color\">{row.calories}</p>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\nexport default Result;\n","/Users/tahmed/Desktop/clear/mastermind/mastermind/src/components/custombutton/index.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":7,"column":8,"nodeType":"106","messageId":"107","endLine":7,"endColumn":14},{"ruleId":"104","severity":1,"message":"108","line":5,"column":8,"nodeType":"106","messageId":"107","endLine":5,"endColumn":16},{"ruleId":"109","severity":1,"message":"110","line":9,"column":6,"nodeType":"111","endLine":9,"endColumn":8,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"113","line":5,"column":7,"nodeType":"106","messageId":"107","endLine":5,"endColumn":14},{"ruleId":"104","severity":1,"message":"114","line":6,"column":7,"nodeType":"106","messageId":"107","endLine":6,"endColumn":14},{"ruleId":"104","severity":1,"message":"115","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"116","line":8,"column":10,"nodeType":"106","messageId":"107","endLine":8,"endColumn":28},{"ruleId":"104","severity":1,"message":"117","line":6,"column":8,"nodeType":"106","messageId":"107","endLine":6,"endColumn":16},{"ruleId":"104","severity":1,"message":"118","line":46,"column":10,"nodeType":"106","messageId":"107","endLine":46,"endColumn":20},{"ruleId":"109","severity":1,"message":"119","line":53,"column":6,"nodeType":"111","endLine":53,"endColumn":12,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":21,"column":6,"nodeType":"111","endLine":21,"endColumn":8,"suggestions":"122"},{"ruleId":"104","severity":1,"message":"123","line":9,"column":8,"nodeType":"106","messageId":"107","endLine":9,"endColumn":13},{"ruleId":"104","severity":1,"message":"124","line":27,"column":9,"nodeType":"106","messageId":"107","endLine":27,"endColumn":16},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'Result' is defined but never used.","Identifier","unusedVar","'Register' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'seconds' is assigned a value but never used.","'counter' is assigned a value but never used.","'useEffect' is defined but never used.","'bindActionCreators' is defined but never used.","'firebase' is defined but never used.","'errorValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions' and 'loginSuccess'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["129"],"'Paper' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [getData]",{"range":"136","text":"137"},"Update the dependencies array to be: [actions, loginSuccess, user]",{"range":"138","text":"139"},"Update the dependencies array to be: [actions]",{"range":"140","text":"141"},[193,195],"[getData]",[1404,1410],"[actions, loginSuccess, user]",[674,676],"[actions]"]